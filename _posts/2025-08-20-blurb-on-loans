---
layout: post
title: "Blurb on Loans"
date: 2025-08-20
tags: [DeFi, lending, borrowing, loan, money market, liquidity]
comments: true
mathjax: true
author: IV
---

# Economics of loans

Alice has a potato. She has no urgency to act with it now - she only plans to consume it in a week. Bob doesn't have a potato, but wants one *now*. Bob could buy Alice's potato in exchange for some stuff, end of story. Alas, things may not be so simple:
* Maybe Bob *can't* buy the potato because he doesn't own anything for which Alice is willing to trade.
* Even if Bob can, perhaps he *doesn't want to* trade his stuff away into Alice's ownership.

In either case, Bob must find a different kind of trade. The astute reader will have noticed that the spot trade above made no use of the asymmetric urgency between Alice and Bob. A *loan* is a trade founded precisely on asymmetric urgency.

In an effort to satisfy his urgent want for a potato, Bob makes the following offer to Alice:
* Alice will give Bob a potato now.
* Bob will repay a potato to Alice in a week.
* Over the course of the week, Bob will also pay Alice for allowing him to delay repayment by a week.

Bob is offering to borrow a potato from Alice. As a lender, Alice is able to generate revenue on her *current* ownership of a potato *together with her lack of urgency* in acting with it, by temporarily foregoing ownership in exchange for some interest payment (in addition to repayment of the potato). In economic literature, urgency is often referred to as 'high time preference', whereas 'low time preference' means a lack of urgency.

In case of trust issues, Alice may require Bob to deposit some stuff as collateral, to insure herself should he wander off into the night with her potato. Undercollateralized loans are customary in the context of legal enforcement. In DeFi, the standard is either overcollateralized loans or trustless loans (e.g. atomic/flash loans).

Let's formalize a little. Recall a contract has *margin requirements* if it specifies how much collateral/margin all parties must provide to enter the contract and maintain in order to keep the position open without liquidation.

**Definition.** An expiring/perpetual loan is a financial contract between two parties (borrower, lender) and comprised of a principal, margin requirements (including collateral and interest rate), and an expiring/perpetual repayment schedule. It is structured as follows.
* At inception:
    * the lender transfers a principal amount of asset X to the borrower;
    * the borrower transfers some amount of asset Y to the lender as collateral/margin.
* The borrower takes on obligation to fulfill a pre-specified future repayment schedule subject to margin requirements.
* Violation of margin requirements results in liquidation, i.e. confiscation of the borrower's collateral.

# Loans in DeFi

It may seem counterintuitive that borrowers would enter overcollateralized loans. The motivation is to maintain exposure to their assets instead of forgoing it. At any rate, motivations for entering overcollateralized positions as part of profit strategies is outside the scope of this post but not required for what follows. Our focus will be architecture of on-chain loan markets.

## AAVE

Each version of AAVE consists of a single `LendingPool` contract that specifies logic for managing loans across multiple asset pools internal to `LendingPool`. The user interface consists of the following functions. There's another method to enable/disable a given asset as collateral, but we'll disregard it in this post.
1. `deposit()` capital into a collateral pool. In AAVE, a collateral deposit is required for both lenders (obviously) and borrowers.
2. `withdraw()` principal + interest from a collateral pool.
3. `borrow()` assets if the resulting loan remains above AAVE's computed liquidation threshold.
4. `repay()` a loan (principal + interest), either fully or partially.
5. `liquidationCall()` allows a liquidator to cover part of an existing debt (asset X) and receive part of the collateral (asset Y). The liquidators payout is determined by AAVE logic.

As a lender, Alice supplies the protocol some token TKN. In exchange she receives an IOU called aTKN that is redeemable 1:1 for TKN. There is some subtlety around aTKN worth clearing up before moving on. AAVE only mints aTKN when users deposit, and only burns it when users withdraw; IOUs are not minted upon repayment. This seems to contradict the 1:1 redemption.

At this point you may be suspicious of redemptions, and rightly so.
* By construction, AAVE operates on full reserves: the supply of aTKN cannot exceed the deposited supply of TKN.
* However, if part of TKN supply is borrowed then only part of aTKN supply can be instantly redeemed at a given moment. Specifically, the amount of instantly redeemable aTKN equals the *idle* supply of TKN. If 3/10 TKN is borrowed then 7/10 TKN is idle whence only 7/10 aTKN can be instantly redeemed.
* Note any injection into the TKN pool (via borrowers repaying or lenders supplying more) increases the capacity of instant redemption. Still, borrowed positions bound the fraction of instantly redeemable aTKN.

So how does Alice earn money?
* In the happy flow, Bob the borrower repays his 10 TKN loan with interest, so he deposits 11 TKN. Then Alice [explain redemption mechanism]
* In the unhappy flow, Bob the borrower enters a liquidation zone. Anyone can initiate a liquidation 
* Still risk of undervalued collateral (despite overcollaterlization). This is the incentivized market part...

Ok, and what exactly is Alice's withdrawal process?
* First of all, Aave only mints aUSDC when users deposit, and burns it when users withdraw.

Solvency??

Full reserves...

Alice supplies TOKEN. In exchange she receives aTOKEN, a yield-bearing IOU.

You can borrow against assets you supplied as collateral.

GPT: 1:1 redeemable... not quite clear...

Who manages risk? "AAVE as an entity manages all the risk" https://x.com/martinkrung/status/1783092537353248972

**Remark.** aTKN is a tradable asset and its value as a 1:1 redeemable IOU derives largely from risk and redemption delay... MORE ON THIS L8A

## Morpho